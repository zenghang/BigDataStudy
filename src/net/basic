https://github.com/zhengjianglong915/note-of-interview/blob/master/network/all.md
1.五层协议
（1）应用层
    应用层是体系结构中的最高层。应用层的任务是通过应用进程间的交互来完成特定网络应用。

应用层协议定义的是应用进程间通信和交互的规则。这里的进程就是指主机中正在运行的程序。对于不同的网络应用

需要不同的应用层协议。在互联网中的应用层协议很多，如域名系统DNS，支持万维网应用的HTTP协议，

支持电子邮件的SMTP协议，等等。我们把应用层交互的数据单元称为报文。

（2）运输层
    运输层的任务就是负责向两台主机中进程之间的通信提供通用的数据传输服务。运输层主要使用一下两种协议：

   （1）传输控制协议TCP：提供面向连接的、可靠的数据传输服务，其数据传输的单位是报文段。

   （2）用户数据报协议UDP：提供无连接的、尽最大努力的数据传输服务（不保证数据的可靠性），其数据传输的单位是用户数据报。

（3）网络层

    网络层负责为分组交换网上的不同主机提供通信服务。在发送数据时，网络层把运输层产生的报文或用户数据

报封装成分组或包进行传送。

（4）数据链路层、

    网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的结点提供

服务。数据链路层把网络层传来的分组封装成帧。

（5）物理层

    考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信

手段的差异，使数据链路层感觉不到这些差异。

1.拥塞控制

    所谓的拥塞控制就是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不至于过载。

拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，

涉及到所有的主机、所有的路由器，以及与降低网络传输性能有关的所有因素。

2.流量控制

     流量控制往往是指点对点通信量的控制，是个端到端的问题（接收端控制发送端）。流量控制所要做

的就是抑制发送端发送数据的速率，以便使接收端来得及接收。

3.TCP的拥塞控制方法

    TCP进行拥塞控制的算法有四种，即慢开始，拥塞避免、快重传和快恢复。

    我们假定数据是单方向传送的，对方只传送确认报文。

    接收方总是有足够大的缓存空间，因而发送窗口的大小由网络的拥塞程度来决定。

（1）慢开始

    下面讨论的拥塞控制也叫基于窗口的拥塞控制。为此，发送方维持一个叫拥塞窗口cwnd的状态变量。

拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞窗口。

    发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就可以再增大一些，以便把更多的分组

发送出去，这样就可以提高网络的利用率。但只要网络出现拥塞或有可能出现拥塞，就必须把拥塞窗口减小一些，

以减少注入到网络中的分组数，以便缓解网络出现的拥塞。

    判断网络拥塞的依据就是出现了超时。

    慢开始算法的思路是这样的：当主机开始发送数据时，由于并不清楚网络的负荷情况，所有如果立即把大量数据

字节注入到网络，那么就有可能引起网络发生拥塞。经验证明，比较好的方法是先探测一下，即由小到大逐渐增大发送窗口，

也就是说，由小到大逐渐增加拥塞窗口数值。

    使用慢开始算法后，每经过一个传输轮次，拥塞窗口就加倍。

（2）拥塞避免

    为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量。慢开始门限ssthresh的用法如下：

当cwnd<ssthresh时，使用上述的慢开始算法。

当cwnd>ssthresh时，停止使用慢开始算法而改用拥塞避免算法。

当cwnd=ssthresh时，既可使用慢开始算法，也可使用拥塞避免算法。

    拥塞避免算法的思路是让拥塞窗口cwnd缓慢地增大，即没经过一个往返时间RTT就把发送发的拥塞窗口cwnd加1，而不是像慢开始

阶段那样加倍增长。因此在拥塞避免阶段就有“加法增大”的特点。这表明在拥塞避免阶段，拥塞窗口cwnd按线性规律缓慢增长，比

慢开始算法的拥塞窗口增长速率缓慢得多。

    当网络出现了超时时，发送方判断为网络拥塞。于是调整门限值ssthresh=cwnd/2,同时设置拥塞窗口cwmd=1,进入慢开始阶段。

    当发送发一连收到3个同一个报文段的重复确认。关于这个问题要解释如下：

    有时，个别报文段会在网络中丢失，但实际上网络并未发生拥塞。如果发送方迟迟收不到确认，就会产生超时，就会误认为网络发生

了拥塞。这就导致发送方错误地开启慢开始，把拥塞窗口cwnd又设置为1，因此降低了传输效率。

（3）快重传

    采用快重传算法可以让发送方尽早知道发生了个别报文段的丢失。快重传算法首先要求接受方不要等待自己发送数据时才进行

捎带确认，而是要立即发送确认，即使收到了失序的报文段也要发出对已收到的报文段的重复确认。

    快速重传算法规定，发送方只要一连收到3个重复确认，就知道接收方确实没有收到报文段，因而应当立即进行重传

（即“快重传”），这样就不会出现超时，发送方也不就会误认为出现了网络拥塞。使用快速重传使得整个网络的吞吐量

提高约20%。

（4）快恢复

    发送方知道现在只是丢失了个别的报文段。于是不启动慢开始，而是执行快恢复算法。这时，发送方调整门限值

ssthresh=cwnd/2,同时设置拥塞窗口cwnd=ssthresh,并开始执行拥塞避免算法。

    请注意，也有的快恢复实现是吧快恢复开始时的拥塞窗口cwnd值再增大一些（增大3个报文段长度），即等于新的

ssthresh+3*MSS。这样坐的理由是：既然发送方收到3个重复的确认，就表明有3个分组已经离开网络。这3个分组不再

消耗网络资源而是停留在接收方的缓存中（接收方发出3个重复的确认就证明了这个事实）。可见现在网络中并不是

堆积了分组而是减少了3个分组。因此可以适当吧拥塞窗口扩大一些。






















