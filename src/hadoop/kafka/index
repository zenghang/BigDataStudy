kafka知识详解：http://www.importnew.com/25247.html
kafka Exactly-once实现原理：https://blog.csdn.net/zhangjun5965/article/details/78218169
1.Kafka特点：
（1）它是一个处理流式数据的“发布-订阅”消息系统。
（2）实时高效的处理流式数据。
（3）将数据安全的存储在分布式集群。
（4）它是运行在集群上的。
（5）它将流式记录存储在topics中。
（6）每个record由key,value和timestamp组成

2.为什么需要消息系统？
（1）解耦：允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。
（2）冗余：消息队列把数据进行持久化直到它们被完全处理，通过这一方式规避了数据丢失风险。
许多消息队列所采用的“插入-获取-删除”范式中，在把一个消息从队列中删除之前，
需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。
（3）扩展性：因为消息队列的解耦合了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。
（4）灵活性 & 峰值处理能力：在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。
如果为以处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。
（5）可恢复性：系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。
（6）顺序保证：在大多数场景下，数据的顺序都很重要。大部分消息队列就是排序的，并且能保证按照特定的顺序来处理。（Kafka保证一个Partition内的消息的有序性）。
（7）缓冲：有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。
（8）异步通信：很多时候，用户不想也不需要处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但不用立即处理它。想向入队放入多少消息就放多少，然后在需要的时候再去处理它们。
